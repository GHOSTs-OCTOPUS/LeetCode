const generate = numRows => {
    const generateRow = rowIndex => {
        const factorials = t => [1n, 1n, 2n, 6n, 24n, 120n, 720n, 5040n, 40320n, 362880n, 3628800n, 39916800n, 479001600n, 6227020800n, 87178291200n, 1307674368000n, 20922789888000n, 355687428096000n, 6402373705728000n, 121645100408832000n, 2432902008176640000n, 51090942171709440000n, 1124000727777607680000n, 25852016738884976640000n, 620448401733239439360000n, 15511210043330985984000000n, 403291461126605635584000000n, 10888869450418352160768000000n, 304888344611713860501504000000n, 8841761993739701954543616000000n, 265252859812191058636308480000000n, 8222838654177922817725562880000000n, 263130836933693530167218012160000000n, 8683317618811886495518194401280000000n][t];
        const combination = (n, r) => Number(factorials(n) / ((factorials(n - r)) * factorials(r)))

        const row = [];

        for (let i = 0; i < rowIndex + 1; i++)
            row.push(combination(rowIndex, i))        

        return row
    };

//
    const res = [];

    for (let i = 0; i < numRows; i++)
        res.push(generateRow(i))
    

    return res;
};